{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as types from \"../types\";\nconst initialState = {};\n\nconst enemyReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ENEMY_SPAWNED:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        enemy: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default enemyReducer;","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/reducers/enemyReducer.js"],"names":["types","initialState","enemyReducer","state","action","type","ENEMY_SPAWNED","enemy","payload"],"mappings":";;;;;;AAEA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,MAAMC,YAAY,GAAG,EAArB;;AAMA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AACrD,UAAQA,MAAM,CAACC,IAAf;AAEI,SAAKL,KAAK,CAACM,aAAX;AACE,6CACKH,KADL;AAEEI,QAAAA,KAAK,EAAEH,MAAM,CAACI;AAFhB;;AAIJ;AACE,aAAOL,KAAP;AARJ;AAUD,CAXD;;AAaA,eAAeD,YAAf","sourcesContent":["\r\n\r\nimport * as types from \"../types\";\r\nconst initialState = {\r\n  \r\n};\r\n\r\n\r\n\r\nconst enemyReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n   \r\n      case types.ENEMY_SPAWNED:\r\n        return{\r\n          ...state,\r\n          enemy: action.payload,\r\n        }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default enemyReducer;"]},"metadata":{},"sourceType":"module"}