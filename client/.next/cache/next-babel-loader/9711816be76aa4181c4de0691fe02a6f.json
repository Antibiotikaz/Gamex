{"ast":null,"code":"import * as types from \"../types\";\nimport axios from \"axios\";\nimport { useSelector } from \"react-redux\"; //login user\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    axios.post(\"http://localhost:9000/users/login\", body).then(res => {\n      dispatch({\n        type: types.LOGIN_USER,\n        payload: res.data\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  } catch {}\n};\nexport const loadUser = () => dispatch => {\n  axios.get(\"http://localhost:9000/users\").then(res => {\n    dispatch({\n      type: types.USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n}; // setup config/headers and token\n\nexport const tokenConfig = () => {\n  // gets token from local storage\n  const token = useSelector(state => state.auth.token); //   const token = getState().auth.token;\n  // headers\n\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }; //iff token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/Actions/authActions.js"],"names":["types","axios","useSelector","login","email","password","dispatch","body","post","then","res","type","LOGIN_USER","payload","data","catch","err","console","log","loadUser","get","USER_LOADED","tokenConfig","token","state","auth","config","headers"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B,C,CACA;;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA0BC,QAAD,IAAc;AAC1D,QAAMC,IAAI,GAAG;AAAEH,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAb;;AAEA,MAAI;AACFJ,IAAAA,KAAK,CACFO,IADH,CACQ,mCADR,EAC6CD,IAD7C,EAEGE,IAFH,CAESC,GAAD,IAAS;AACbJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEX,KAAK,CAACY,UADL;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAID,KAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAVH;AAWD,GAZD,CAYE,MAAM,CAAE;AACX,CAhBM;AAkBP,OAAO,MAAMG,QAAQ,GAAG,MAAOb,QAAD,IAAc;AAC1CL,EAAAA,KAAK,CACFmB,GADH,CACO,6BADP,EAEGX,IAFH,CAESC,GAAD,IAAS;AACbJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX,KAAK,CAACqB,WADL;AAEPR,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAVH;AAWD,CAZM,C,CAaP;;AACA,OAAO,MAAMM,WAAW,GAAG,MAAM;AAC/B;AAEA,QAAMC,KAAK,GAAGrB,WAAW,CAAEsB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWF,KAAvB,CAAzB,CAH+B,CAI/B;AAEA;;AACA,QAAMG,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAP+B,CAa/B;;AACA,MAAIJ,KAAJ,EAAW;AACTG,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCJ,KAAjC;AACD;;AACD,SAAOG,MAAP;AACD,CAlBM","sourcesContent":["import * as types from \"../types\";\r\nimport axios from \"axios\";\r\nimport { useSelector } from \"react-redux\";\r\n//login user\r\n\r\nexport const login = ({ email, password }) => (dispatch) => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    axios\r\n      .post(\"http://localhost:9000/users/login\", body)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: types.LOGIN_USER,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } catch {}\r\n};\r\n\r\nexport const loadUser = () => (dispatch) => {\r\n  axios\r\n    .get(\"http://localhost:9000/users\")\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n// setup config/headers and token\r\nexport const tokenConfig = () => {\r\n  // gets token from local storage\r\n\r\n  const token = useSelector((state) => state.auth.token);\r\n  //   const token = getState().auth.token;\r\n\r\n  // headers\r\n  const config = {\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  //iff token, add to headers\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}