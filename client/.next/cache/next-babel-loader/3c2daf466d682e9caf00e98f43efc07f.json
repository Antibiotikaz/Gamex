{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as types from \"../types\";\nimport axios from \"axios\";\nexport var attack = function attack(_ref) {\n  var userId = _ref.userId,\n      health = _ref.health,\n      enemyDamage = _ref.enemyDamage,\n      enemyID = _ref.enemyID,\n      damage = _ref.damage,\n      enemyHealth = _ref.enemyHealth;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              body = {\n                userId: userId,\n                health: health,\n                enemyDamage: enemyDamage,\n                enemyID: enemyID,\n                damage: damage,\n                enemyHealth: enemyHealth\n              };\n              _context.next = 3;\n              return axios.put(\"http://localhost:9000/users/attack/\".concat(body.userId), body).then(function (res) {\n                dispatch({\n                  type: types.USER_UPDATES_HEALTH,\n                  payload: res.data\n                });\n              }).then(function () {\n                axios.get(\"http://localhost:9000/users/attack/\".concat(body.userId)).then(function (res) {\n                  dispatch({\n                    type: types.USER_DATA_AFTER_ATTACK,\n                    payload: res.data\n                  });\n                });\n              }).then(function () {\n                axios.put(\"http://localhost:9000/enemies/update/health/\".concat(body.enemyID), body).then(function (res) {\n                  dispatch({\n                    type: types.UPDATE_ENEMY_HEALTH,\n                    payload: res.data\n                  });\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var spawnEnemy = function spawnEnemy(enemyID) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              body = {\n                enemyID: enemyID\n              };\n              _context2.next = 3;\n              return axios.get(\"http://localhost:9000/enemies/spawn/\".concat(body.enemyID), body).then(function (res) {\n                dispatch({\n                  type: types.ENEMY_SPAWNED,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getWeather = function getWeather() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios.get(\"http://api.openweathermap.org/data/2.5/weather?id=598098&appid=b5516378bf01a1077c5f71323ba950ac&units=metric\").then(function (res) {\n                dispatch({\n                  type: types.GET_WEATHER,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var wonBattle = function wonBattle(_ref5) {\n  var enemyID = _ref5.enemyID,\n      userId = _ref5.userId;\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              body = {\n                enemyID: enemyID,\n                userId: userId\n              };\n              _context4.next = 3;\n              return axios.put(\"http://localhost:9000/users/won/\".concat(body.userId), body).then(function (res) {\n                dispatch({\n                  type: types.NEW_STATS_AFTER_BATTLE,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};\nexport var statsReset = function statsReset(_ref7) {\n  var userId = _ref7.userId;\n  return /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              body = {\n                userId: userId\n              };\n              console.log(body.userId, 'reset');\n              _context5.next = 4;\n              return axios.put(\"http://localhost:9000/users/statsReset/\".concat(body.userId), body).then(function (res) {\n                dispatch({\n                  type: types.USER_STATS_RESET,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/Actions/userActions.js"],"names":["types","axios","attack","userId","health","enemyDamage","enemyID","damage","enemyHealth","dispatch","body","put","then","res","type","USER_UPDATES_HEALTH","payload","data","get","USER_DATA_AFTER_ATTACK","UPDATE_ENEMY_HEALTH","err","console","log","spawnEnemy","ENEMY_SPAWNED","getWeather","GET_WEATHER","wonBattle","NEW_STATS_AFTER_BATTLE","statsReset","USER_STATS_RESET"],"mappings":"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","sourcesContent":["import * as types from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nexport const attack = ({ userId, health, enemyDamage,enemyID,damage, enemyHealth }) => async (dispatch) => {\r\n  const body = {\r\n    userId,\r\n    health,\r\n    enemyDamage,\r\n    enemyID,\r\n    damage,\r\n    enemyHealth,\r\n  };\r\n  \r\n  \r\n  await axios\r\n    .put(`http://localhost:9000/users/attack/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_UPDATES_HEALTH,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .then(() => {\r\n      axios\r\n        .get(`http://localhost:9000/users/attack/${body.userId}`)\r\n        .then((res) => {\r\n          dispatch({\r\n            type: types.USER_DATA_AFTER_ATTACK,\r\n            payload: res.data,\r\n          });\r\n        });\r\n    })\r\n    .then (() => {\r\n       axios\r\n      .put(\r\n        `http://localhost:9000/enemies/update/health/${body.enemyID}`,\r\n        body\r\n      )\r\n      .then((res) => {\r\n        dispatch({\r\n          type: types.UPDATE_ENEMY_HEALTH,\r\n             payload: res.data,\r\n        });\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const spawnEnemy = (enemyID) => async (dispatch) => {\r\n  const body = {\r\n    enemyID,\r\n  };\r\n  await axios\r\n    .get(`http://localhost:9000/enemies/spawn/${body.enemyID}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.ENEMY_SPAWNED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const getWeather = () => async (dispatch) => {\r\n  await axios\r\n    .get(\r\n      `http://api.openweathermap.org/data/2.5/weather?id=598098&appid=b5516378bf01a1077c5f71323ba950ac&units=metric`\r\n    )\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.GET_WEATHER,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const wonBattle = ({enemyID, userId}) => async (dispatch) => {\r\n  const body = {\r\n    enemyID,\r\n    userId,\r\n  };\r\n  await axios\r\n    .put(`http://localhost:9000/users/won/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.NEW_STATS_AFTER_BATTLE,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\n\r\nexport const statsReset = ({userId}) => async (dispatch) => {\r\n  const body = {\r\n    userId,\r\n  };\r\n  console.log(body.userId, 'reset')\r\n  await axios\r\n    .put(`http://localhost:9000/users/statsReset/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_STATS_RESET,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}