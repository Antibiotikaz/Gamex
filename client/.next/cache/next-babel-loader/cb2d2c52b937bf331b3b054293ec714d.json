{"ast":null,"code":"import * as types from \"../types\";\nimport axios from \"axios\";\nexport const attack = ({\n  userId,\n  health,\n  enemyDamage,\n  enemyID,\n  damage,\n  enemyHealth\n}) => async dispatch => {\n  const body = {\n    userId,\n    health,\n    enemyDamage,\n    enemyID,\n    damage,\n    enemyHealth\n  };\n  await axios.put(`http://localhost:9000/users/attack/${body.userId}`, body).then(res => {\n    dispatch({\n      type: types.USER_UPDATES_HEALTH,\n      payload: res.data\n    });\n  }).then(() => {\n    axios.get(`http://localhost:9000/users/attack/${body.userId}`).then(res => {\n      dispatch({\n        type: types.USER_DATA_AFTER_ATTACK,\n        payload: res.data\n      });\n    });\n  }).then(() => {\n    axios.put(`http://localhost:9000/enemies/update/health/${body.enemyID}`, body).then(res => {\n      dispatch({\n        type: types.UPDATE_ENEMY_HEALTH,\n        payload: res.data\n      });\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const spawnEnemy = enemyID => async dispatch => {\n  const body = {\n    enemyID\n  };\n  await axios.get(`http://localhost:9000/enemies/spawn/${body.enemyID}`, body).then(res => {\n    dispatch({\n      type: types.ENEMY_SPAWNED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const getWeather = () => async dispatch => {\n  await axios.get(`http://api.openweathermap.org/data/2.5/weather?id=598098&appid=b5516378bf01a1077c5f71323ba950ac&units=metric`).then(res => {\n    dispatch({\n      type: types.GET_WEATHER,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const wonBattle = ({\n  enemyID,\n  userId\n}) => async dispatch => {\n  const body = {\n    enemyID,\n    userId\n  };\n  await axios.put(`http://localhost:9000/users/won/${body.userId}`, body).then(res => {\n    dispatch({\n      type: types.NEW_STATS_AFTER_BATTLE,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const statsReset = ({\n  userId\n}) => async dispatch => {\n  const body = {\n    userId\n  };\n  console.log(body.userId, 'reset');\n  await axios.put(`http://localhost:9000/users/statsReset/${body.userId}`, body).then(res => {\n    dispatch({\n      type: types.USER_STATS_RESET,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n};","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/Actions/userActions.js"],"names":["types","axios","attack","userId","health","enemyDamage","enemyID","damage","enemyHealth","dispatch","body","put","then","res","type","USER_UPDATES_HEALTH","payload","data","get","USER_DATA_AFTER_ATTACK","UPDATE_ENEMY_HEALTH","catch","err","console","log","spawnEnemy","ENEMY_SPAWNED","getWeather","GET_WEATHER","wonBattle","NEW_STATS_AFTER_BATTLE","statsReset","USER_STATS_RESET"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,MAAV;AAAkBC,EAAAA,WAAlB;AAA8BC,EAAAA,OAA9B;AAAsCC,EAAAA,MAAtC;AAA8CC,EAAAA;AAA9C,CAAD,KAAiE,MAAOC,QAAP,IAAoB;AACzG,QAAMC,IAAI,GAAG;AACXP,IAAAA,MADW;AAEXC,IAAAA,MAFW;AAGXC,IAAAA,WAHW;AAIXC,IAAAA,OAJW;AAKXC,IAAAA,MALW;AAMXC,IAAAA;AANW,GAAb;AAUA,QAAMP,KAAK,CACRU,GADG,CACE,sCAAqCD,IAAI,CAACP,MAAO,EADnD,EACsDO,IADtD,EAEHE,IAFG,CAEGC,GAAD,IAAS;AACbJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,KAAK,CAACe,mBADL;AAEPC,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPG,EAQHL,IARG,CAQE,MAAM;AACVX,IAAAA,KAAK,CACFiB,GADH,CACQ,sCAAqCR,IAAI,CAACP,MAAO,EADzD,EAEGS,IAFH,CAESC,GAAD,IAAS;AACbJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEd,KAAK,CAACmB,sBADL;AAEPH,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAID,KAPH;AAQD,GAjBG,EAkBHL,IAlBG,CAkBG,MAAM;AACVX,IAAAA,KAAK,CACLU,GADA,CAEE,+CAA8CD,IAAI,CAACJ,OAAQ,EAF7D,EAGCI,IAHD,EAKAE,IALA,CAKMC,GAAD,IAAS;AACbJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEd,KAAK,CAACoB,mBADL;AAEJJ,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFT,OAAD,CAAR;AAID,KAVA;AAWF,GA9BG,EA+BHI,KA/BG,CA+BIC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAjCG,CAAN;AAkCD,CA7CM;AA+CP,OAAO,MAAMG,UAAU,GAAInB,OAAD,IAAa,MAAOG,QAAP,IAAoB;AACzD,QAAMC,IAAI,GAAG;AACXJ,IAAAA;AADW,GAAb;AAGA,QAAML,KAAK,CACRiB,GADG,CACE,uCAAsCR,IAAI,CAACJ,OAAQ,EADrD,EACwDI,IADxD,EAEHE,IAFG,CAEGC,GAAD,IAAS;AACbJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,KAAK,CAAC0B,aADL;AAEPV,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPG,EAQHI,KARG,CAQIC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAVG,CAAN;AAWD,CAfM;AAiBP,OAAO,MAAMK,UAAU,GAAG,MAAM,MAAOlB,QAAP,IAAoB;AAClD,QAAMR,KAAK,CACRiB,GADG,CAED,8GAFC,EAIHN,IAJG,CAIGC,GAAD,IAAS;AACbJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,KAAK,CAAC4B,WADL;AAEPZ,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GATG,EAUHI,KAVG,CAUIC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAZG,CAAN;AAaD,CAdM;AAgBP,OAAO,MAAMO,SAAS,GAAG,CAAC;AAACvB,EAAAA,OAAD;AAAUH,EAAAA;AAAV,CAAD,KAAuB,MAAOM,QAAP,IAAoB;AAClE,QAAMC,IAAI,GAAG;AACXJ,IAAAA,OADW;AAEXH,IAAAA;AAFW,GAAb;AAIA,QAAMF,KAAK,CACRU,GADG,CACE,mCAAkCD,IAAI,CAACP,MAAO,EADhD,EACmDO,IADnD,EAEHE,IAFG,CAEGC,GAAD,IAAS;AACbJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,KAAK,CAAC8B,sBADL;AAEPd,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPG,EAQHI,KARG,CAQIC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAVG,CAAN;AAWD,CAhBM;AAmBP,OAAO,MAAMS,UAAU,GAAG,CAAC;AAAC5B,EAAAA;AAAD,CAAD,KAAc,MAAOM,QAAP,IAAoB;AAC1D,QAAMC,IAAI,GAAG;AACXP,IAAAA;AADW,GAAb;AAGAoB,EAAAA,OAAO,CAACC,GAAR,CAAYd,IAAI,CAACP,MAAjB,EAAyB,OAAzB;AACA,QAAMF,KAAK,CACRU,GADG,CACE,0CAAyCD,IAAI,CAACP,MAAO,EADvD,EAC0DO,IAD1D,EAEHE,IAFG,CAEGC,GAAD,IAAS;AACbJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEd,KAAK,CAACgC,gBADL;AAEPhB,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPG,EAQHI,KARG,CAQIC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAVG,CAAN;AAWD,CAhBM","sourcesContent":["import * as types from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nexport const attack = ({ userId, health, enemyDamage,enemyID,damage, enemyHealth }) => async (dispatch) => {\r\n  const body = {\r\n    userId,\r\n    health,\r\n    enemyDamage,\r\n    enemyID,\r\n    damage,\r\n    enemyHealth,\r\n  };\r\n  \r\n  \r\n  await axios\r\n    .put(`http://localhost:9000/users/attack/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_UPDATES_HEALTH,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .then(() => {\r\n      axios\r\n        .get(`http://localhost:9000/users/attack/${body.userId}`)\r\n        .then((res) => {\r\n          dispatch({\r\n            type: types.USER_DATA_AFTER_ATTACK,\r\n            payload: res.data,\r\n          });\r\n        });\r\n    })\r\n    .then (() => {\r\n       axios\r\n      .put(\r\n        `http://localhost:9000/enemies/update/health/${body.enemyID}`,\r\n        body\r\n      )\r\n      .then((res) => {\r\n        dispatch({\r\n          type: types.UPDATE_ENEMY_HEALTH,\r\n             payload: res.data,\r\n        });\r\n      })\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const spawnEnemy = (enemyID) => async (dispatch) => {\r\n  const body = {\r\n    enemyID,\r\n  };\r\n  await axios\r\n    .get(`http://localhost:9000/enemies/spawn/${body.enemyID}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.ENEMY_SPAWNED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const getWeather = () => async (dispatch) => {\r\n  await axios\r\n    .get(\r\n      `http://api.openweathermap.org/data/2.5/weather?id=598098&appid=b5516378bf01a1077c5f71323ba950ac&units=metric`\r\n    )\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.GET_WEATHER,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const wonBattle = ({enemyID, userId}) => async (dispatch) => {\r\n  const body = {\r\n    enemyID,\r\n    userId,\r\n  };\r\n  await axios\r\n    .put(`http://localhost:9000/users/won/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.NEW_STATS_AFTER_BATTLE,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\n\r\nexport const statsReset = ({userId}) => async (dispatch) => {\r\n  const body = {\r\n    userId,\r\n  };\r\n  console.log(body.userId, 'reset')\r\n  await axios\r\n    .put(`http://localhost:9000/users/statsReset/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_STATS_RESET,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}