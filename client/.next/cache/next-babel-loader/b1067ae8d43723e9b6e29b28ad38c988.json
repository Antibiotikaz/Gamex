{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as types from \"../types\";\nimport axios from \"axios\";\nexport var attack = function attack(_ref) {\n  var userId = _ref.userId,\n      health = _ref.health,\n      enemyDamage = _ref.enemyDamage;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              body = {\n                userId: userId,\n                health: health,\n                enemyDamage: enemyDamage\n              };\n              _context.next = 3;\n              return axios.put(\"http://localhost:9000/users/attack/\".concat(body.userId), body).then(function (res) {\n                dispatch({\n                  type: types.USER_UPDATES_HEALTH,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var spawnEnemy = function spawnEnemy(_ref3) {\n  var enemyID = _ref3.enemyID;\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              body = {\n                enemyID: enemyID\n              };\n              _context2.next = 3;\n              return axios.get(\"http://localhost:9000/enemies/spawn/\".concat(body.enemyID), body).then(function (res) {\n                dispatch({\n                  type: types.ENEMY_SPAWNED,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/Actions/userActions.js"],"names":["types","axios","attack","userId","health","enemyDamage","dispatch","body","put","then","res","type","USER_UPDATES_HEALTH","payload","data","err","console","log","spawnEnemy","enemyID","get","ENEMY_SPAWNED"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MAAEC,MAAF,QAAEA,MAAF;AAAA,MAAUC,MAAV,QAAUA,MAAV;AAAA,MAAkBC,WAAlB,QAAkBA,WAAlB;AAAA;AAAA,yEAAoC,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChDC,cAAAA,IADgD,GACzC;AACXJ,gBAAAA,MAAM,EAANA,MADW;AAETC,gBAAAA,MAAM,EAANA,MAFS;AAGTC,gBAAAA,WAAW,EAAXA;AAHS,eADyC;AAAA;AAAA,qBAOhDJ,KAAK,CACRO,GADG,8CAEoCD,IAAI,CAACJ,MAFzC,GAGFI,IAHE,EAKHE,IALG,CAKE,UAACC,GAAD,EAAS;AACbJ,gBAAAA,QAAQ,CAAC;AACPK,kBAAAA,IAAI,EAAEX,KAAK,CAACY,mBADL;AAEJC,kBAAAA,OAAO,EAAEH,GAAG,CAACI;AAFT,iBAAD,CAAR;AAID,eAVG,WAWG,UAACC,GAAD,EAAS;AACVC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACL,eAbG,CAPgD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApC;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAf;AAuBL,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAEC,OAAF,SAAEA,OAAF;AAAA;AAAA,yEAAgB,kBAAOb,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAClCC,cAAAA,IADkC,GAC3B;AACXY,gBAAAA,OAAO,EAAPA;AADW,eAD2B;AAAA;AAAA,qBAMlClB,KAAK,CACRmB,GADG,+CAEqCb,IAAI,CAACY,OAF1C,GAGFZ,IAHE,EAKHE,IALG,CAKE,UAACC,GAAD,EAAS;AACbJ,gBAAAA,QAAQ,CAAC;AACPK,kBAAAA,IAAI,EAAEX,KAAK,CAACqB,aADL;AAEJR,kBAAAA,OAAO,EAAEH,GAAG,CAACI;AAFT,iBAAD,CAAR;AAID,eAVG,WAWG,UAACC,GAAD,EAAS;AACVC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACL,eAbG,CANkC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhB;;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB","sourcesContent":["import * as types from \"../types\";\r\nimport axios from \"axios\";\r\n\r\n\r\nexport const attack = ({userId, health, enemyDamage }) => async (dispatch) => {\r\n    const body = {\r\n      userId,\r\n        health,\r\n        enemyDamage,\r\n    };\r\n  \r\n    await axios\r\n      .put(\r\n        `http://localhost:9000/users/attack/${body.userId}`,\r\n        body\r\n      )\r\n      .then((res) => {\r\n        dispatch({\r\n          type: types.USER_UPDATES_HEALTH,\r\n             payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n            console.log(err);\r\n      });\r\n  };\r\n\r\n  export const spawnEnemy = ({enemyID }) => async (dispatch) => {\r\n    const body = {\r\n      enemyID,\r\n      \r\n    };\r\n  \r\n    await axios\r\n      .get(\r\n        `http://localhost:9000/enemies/spawn/${body.enemyID}`,\r\n        body\r\n      )\r\n      .then((res) => {\r\n        dispatch({\r\n          type: types.ENEMY_SPAWNED,\r\n             payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n            console.log(err);\r\n      });\r\n  };"]},"metadata":{},"sourceType":"module"}