{"ast":null,"code":"import * as types from \"../types\";\nimport axios from \"axios\";\nimport { Cookies } from \"react-cookie\"; //login user\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  const body = {\n    email,\n    password\n  };\n\n  try {\n    axios.post(\"http://localhost:9000/users/login\", body).then(res => {\n      dispatch({\n        type: types.LOGIN_USER,\n        payload: res.data\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  } catch {}\n};\nexport const loadUser = () => (dispatch, getState) => {\n  axios.get(\"http://localhost:9000/users\", tokenConfig(getState)).then(res => {\n    dispatch({\n      type: types.USER_LOADED,\n      payload: res.data\n    });\n  }).catch(err => {\n    console.log(err);\n  });\n}; // setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // gets token from local storage\n  //   const token = useSelector((state) => state.auth.token);\n  const token = cookie;\n  console.log(token, \"token in TokenConfig\"); // headers\n\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }; //iff token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/Actions/authActions.js"],"names":["types","axios","Cookies","login","email","password","dispatch","body","post","then","res","type","LOGIN_USER","payload","data","catch","err","console","log","loadUser","getState","get","tokenConfig","USER_LOADED","token","cookie","config","headers"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,cAAxB,C,CACA;;AAEA,OAAO,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAA0BC,QAAD,IAAc;AAC1D,QAAMC,IAAI,GAAG;AAAEH,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAb;;AAEA,MAAI;AACFJ,IAAAA,KAAK,CACFO,IADH,CACQ,mCADR,EAC6CD,IAD7C,EAEGE,IAFH,CAESC,GAAD,IAAS;AACbJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEX,KAAK,CAACY,UADL;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAID,KAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAVH;AAWD,GAZD,CAYE,MAAM,CAAE;AACX,CAhBM;AAkBP,OAAO,MAAMG,QAAQ,GAAG,MAAM,CAACb,QAAD,EAAWc,QAAX,KAAwB;AACpDnB,EAAAA,KAAK,CACFoB,GADH,CACO,6BADP,EACsCC,WAAW,CAACF,QAAD,CADjD,EAEGX,IAFH,CAESC,GAAD,IAAS;AACbJ,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX,KAAK,CAACuB,WADL;AAEPV,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,KAAD,CAAR;AAID,GAPH,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,GAVH;AAWD,CAZM,C,CAaP;;AACA,OAAO,MAAMM,WAAW,GAAIF,QAAD,IAAc;AACvC;AAEA;AACA,QAAMI,KAAK,GAAGC,MAAd;AACAR,EAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ,EAAmB,sBAAnB,EALuC,CAMvC;;AACA,QAAME,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAPuC,CAavC;;AACA,MAAIH,KAAJ,EAAW;AACTE,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCH,KAAjC;AACD;;AACD,SAAOE,MAAP;AACD,CAlBM","sourcesContent":["import * as types from \"../types\";\r\nimport axios from \"axios\";\r\nimport { Cookies } from \"react-cookie\";\r\n//login user\r\n\r\nexport const login = ({ email, password }) => (dispatch) => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    axios\r\n      .post(\"http://localhost:9000/users/login\", body)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: types.LOGIN_USER,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } catch {}\r\n};\r\n\r\nexport const loadUser = () => (dispatch, getState) => {\r\n  axios\r\n    .get(\"http://localhost:9000/users\", tokenConfig(getState))\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n// setup config/headers and token\r\nexport const tokenConfig = (getState) => {\r\n  // gets token from local storage\r\n\r\n  //   const token = useSelector((state) => state.auth.token);\r\n  const token = cookie;\r\n  console.log(token, \"token in TokenConfig\");\r\n  // headers\r\n  const config = {\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  //iff token, add to headers\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}