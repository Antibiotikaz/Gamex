{"ast":null,"code":"import * as types from \"../types\";\nimport axios from \"axios\";\nimport { store } from \"../../store/store\"; //login user\n\nexport var login = function login(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return function (dispatch) {\n    var body = {\n      email: email,\n      password: password\n    };\n\n    try {\n      axios.post(\"http://localhost:9000/users/login\", body).then(function (res) {\n        dispatch({\n          type: types.LOGIN_USER,\n          payload: res.data\n        });\n      })[\"catch\"](function (err) {\n        console.log(err);\n      });\n    } catch (_unused) {}\n  };\n};\nexport var loadUser = function loadUser() {\n  return function (dispatch) {\n    axios.get(\"http://localhost:9000/users\", tokenConfig(getState)).then(function (res) {\n      dispatch({\n        type: types.USER_LOADED,\n        payload: res.data\n      });\n    })[\"catch\"](function (err) {\n      console.log(err);\n    });\n  };\n}; // setup config/headers and token\n\nexport var tokenConfig = function tokenConfig(getState) {\n  // gets token from local storage\n  var token = store.state().auth.token; // headers\n\n  var config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }; //iff token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/Actions/authActions.js"],"names":["types","axios","store","login","email","password","dispatch","body","post","then","res","type","LOGIN_USER","payload","data","err","console","log","loadUser","get","tokenConfig","getState","USER_LOADED","token","state","auth","config","headers"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,UAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB,C,CACA;;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,MAAUC,QAAV,QAAUA,QAAV;AAAA,SAAyB,UAACC,QAAD,EAAc;AAC1D,QAAMC,IAAI,GAAG;AAAEH,MAAAA,KAAK,EAALA,KAAF;AAASC,MAAAA,QAAQ,EAARA;AAAT,KAAb;;AAEA,QAAI;AACFJ,MAAAA,KAAK,CACFO,IADH,CACQ,mCADR,EAC6CD,IAD7C,EAEGE,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbJ,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEX,KAAK,CAACY,UADL;AAEPC,UAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,SAAD,CAAR;AAID,OAPH,WAQS,UAACC,GAAD,EAAS;AACdC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,OAVH;AAWD,KAZD,CAYE,gBAAM,CAAE;AACX,GAhBoB;AAAA,CAAd;AAkBP,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW;AAAA,SAAM,UAACZ,QAAD,EAAc;AAC1CL,IAAAA,KAAK,CACFkB,GADH,CACO,6BADP,EACsCC,WAAW,CAACC,QAAD,CADjD,EAEGZ,IAFH,CAEQ,UAACC,GAAD,EAAS;AACbJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEX,KAAK,CAACsB,WADL;AAEPT,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAFN,OAAD,CAAR;AAID,KAPH,WAQS,UAACC,GAAD,EAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD,KAVH;AAWD,GAZuB;AAAA,CAAjB,C,CAaP;;AACA,OAAO,IAAMK,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAc;AACvC;AACA,MAAME,KAAK,GAAGrB,KAAK,CAACsB,KAAN,GAAcC,IAAd,CAAmBF,KAAjC,CAFuC,CAIvC;;AACA,MAAMG,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CALuC,CAWvC;;AACA,MAAIJ,KAAJ,EAAW;AACTG,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCJ,KAAjC;AACD;;AACD,SAAOG,MAAP;AACD,CAhBM","sourcesContent":["import * as types from \"../types\";\r\nimport axios from \"axios\";\r\nimport { store } from \"../../store/store\";\r\n//login user\r\n\r\nexport const login = ({ email, password }) => (dispatch) => {\r\n  const body = { email, password };\r\n\r\n  try {\r\n    axios\r\n      .post(\"http://localhost:9000/users/login\", body)\r\n      .then((res) => {\r\n        dispatch({\r\n          type: types.LOGIN_USER,\r\n          payload: res.data,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  } catch {}\r\n};\r\n\r\nexport const loadUser = () => (dispatch) => {\r\n  axios\r\n    .get(\"http://localhost:9000/users\", tokenConfig(getState))\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_LOADED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n// setup config/headers and token\r\nexport const tokenConfig = (getState) => {\r\n  // gets token from local storage\r\n  const token = store.state().auth.token;\r\n\r\n  // headers\r\n  const config = {\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  //iff token, add to headers\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}