{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as types from \"../types\";\nimport axios from \"axios\";\nexport var attack = function attack(_ref) {\n  var userId = _ref.userId,\n      health = _ref.health,\n      enemyDamage = _ref.enemyDamage;\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              body = {\n                userId: userId,\n                health: health,\n                enemyDamage: enemyDamage\n              };\n              _context.next = 3;\n              return axios.get(\"http://localhost:9000/users\", tokenConfig(getState)).then(function (res) {\n                dispatch({\n                  type: types.USER_LOADED,\n                  payload: res.data\n                });\n              }).then(function () {\n                axios.put(\"http://localhost:9000/users/attack/\".concat(body.userId), body).then(function (res) {\n                  dispatch({\n                    type: types.USER_UPDATES_HEALTH,\n                    payload: res.data\n                  });\n                }).then(function () {\n                  axios.get(\"http://localhost:9000/users/attack/\".concat(body.userId)).then(function (res) {\n                    dispatch({\n                      type: types.USER_DATA_AFTER_ATTACK,\n                      payload: res.data\n                    });\n                  });\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var spawnEnemy = function spawnEnemy(enemyID) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              body = {\n                enemyID: enemyID\n              };\n              _context2.next = 3;\n              return axios.get(\"http://localhost:9000/enemies/spawn/\".concat(body.enemyID), body).then(function (res) {\n                dispatch({\n                  type: types.ENEMY_SPAWNED,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var getWeather = function getWeather() {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return axios.get(\"http://api.openweathermap.org/data/2.5/weather?id=598098&appid=b5516378bf01a1077c5f71323ba950ac&units=metric\").then(function (res) {\n                dispatch({\n                  type: types.GET_WEATHER,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var wonBattle = function wonBattle(_ref5) {\n  var enemyID = _ref5.enemyID,\n      userId = _ref5.userId;\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var body;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              body = {\n                enemyID: enemyID,\n                userId: userId\n              };\n              _context4.next = 3;\n              return axios.put(\"http://localhost:9000/users/won/\".concat(body.userId), body).then(function (res) {\n                dispatch({\n                  type: types.NEW_STATS_AFTER_BATTLE,\n                  payload: res.data\n                });\n              })[\"catch\"](function (err) {\n                console.log(err);\n              });\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n}; // setup config/headers and token\n\nexport var tokenConfig = function tokenConfig() {\n  var cookie = new Cookies();\n  var token = cookie.get(\"token\"); // headers\n\n  var config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }; //iff token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/ernes/Desktop/HomProject/gamex/client/store/Actions/userActions.js"],"names":["types","axios","attack","userId","health","enemyDamage","dispatch","body","get","tokenConfig","getState","then","res","type","USER_LOADED","payload","data","put","USER_UPDATES_HEALTH","USER_DATA_AFTER_ATTACK","err","console","log","spawnEnemy","enemyID","ENEMY_SPAWNED","getWeather","GET_WEATHER","wonBattle","NEW_STATS_AFTER_BATTLE","cookie","Cookies","token","config","headers"],"mappings":"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","sourcesContent":["import * as types from \"../types\";\r\nimport axios from \"axios\";\r\n\r\nexport const attack = ({ userId, health, enemyDamage }) => async (dispatch) => {\r\n  const body = {\r\n    userId,\r\n    health,\r\n    enemyDamage,\r\n  };\r\n  await axios\r\n  .get(\"http://localhost:9000/users\", tokenConfig(getState))\r\n  .then((res) => {\r\n    dispatch({\r\n      type: types.USER_LOADED,\r\n      payload: res.data,\r\n    });\r\n  })\r\n  .then(() => {\r\n     axios\r\n    .put(`http://localhost:9000/users/attack/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.USER_UPDATES_HEALTH,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .then(() => {\r\n      axios\r\n        .get(`http://localhost:9000/users/attack/${body.userId}`)\r\n        .then((res) => {\r\n          dispatch({\r\n            type: types.USER_DATA_AFTER_ATTACK,\r\n            payload: res.data,\r\n          });\r\n        });\r\n    })\r\n  })\r\n  \r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const spawnEnemy = (enemyID) => async (dispatch) => {\r\n  const body = {\r\n    enemyID,\r\n  };\r\n  await axios\r\n    .get(`http://localhost:9000/enemies/spawn/${body.enemyID}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.ENEMY_SPAWNED,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const getWeather = () => async (dispatch) => {\r\n  await axios\r\n    .get(\r\n      `http://api.openweathermap.org/data/2.5/weather?id=598098&appid=b5516378bf01a1077c5f71323ba950ac&units=metric`\r\n    )\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.GET_WEATHER,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n\r\nexport const wonBattle = ({enemyID, userId}) => async (dispatch) => {\r\n  const body = {\r\n    enemyID,\r\n    userId,\r\n  };\r\n  await axios\r\n    .put(`http://localhost:9000/users/won/${body.userId}`, body)\r\n    .then((res) => {\r\n      dispatch({\r\n        type: types.NEW_STATS_AFTER_BATTLE,\r\n        payload: res.data,\r\n      });\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n    });\r\n};\r\n// setup config/headers and token\r\nexport const tokenConfig = () => {\r\n  const cookie = new Cookies();\r\n\r\n  const token = cookie.get(\"token\");\r\n\r\n  // headers\r\n  const config = {\r\n    headers: {\r\n      \"content-type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  //iff token, add to headers\r\n  if (token) {\r\n    config.headers[\"x-auth-token\"] = token;\r\n  }\r\n  return config;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}